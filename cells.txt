0
{'cell_type': 'markdown', 'id': 'ff7ae00b', 'metadata': {}, 'source': ['# MEFE - TP computacional 1']}
1
{'cell_type': 'markdown', 'id': '8d332b78', 'metadata': {}, 'source': ['Este informe es la resolución del primer TP computacional de [MEFE](http://materias.df.uba.ar/meefea2023c1/), cuya consigna se puede ver [acá](http://materias.df.uba.ar/meefea2023c1/files/2023/04/Computacional1_MEFE2023.pdf). También tiene su versión en Jupyter Notebook\n', '\n', '[![Jupyter Notebook](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb)\n', '\n', 'y su versión [web](https://tdinapoli.github.io).']}
2
{'cell_type': 'markdown', 'id': '028cce95', 'metadata': {}, 'source': ['**1)**\n', 'Primero importo las librerías que voy a necesitar.']}
3
{'cell_type': 'code', 'execution_count': 1, 'id': '06e16123', 'metadata': {}, 'outputs': [], 'source': ['import numpy as np\n', 'import matplotlib.pyplot as plt\n', 'from scipy.stats import binom, hypergeom, poisson\n', "plt.style.use('seaborn-whitegrid')"]}
4
{'cell_type': 'markdown', 'id': '68bf3b17', 'metadata': {}, 'source': ['Defino una función ```bernoulli```, que toma ```n``` la cantidad de veces que "tiramos una moneda" y ```p``` la probabilidad de que salga cara (que lo represento con un 1). Opcionalmente toma ```size``` para que el resultado sea un array de experimentos de Bernoulli de la forma que yo quiera.\n', '\n', "Luego implemento la función ```contar_exitos``` que toma un conjunto de experimentos de Bernoulli y cuenta la cantidad de caras (1's). Luego llamo a las funciones y comparo con los valores de p y (1-p)."]}
5
{'cell_type': 'code', 'execution_count': 2, 'id': 'b43fd83a', 'metadata': {}, 'outputs': [{'name': 'stdout', 'output_type': 'stream', 'text': ['p \tes \t0.02\n', '1-p \tes \t0.98\n', 'en 1000000 experimentos,\n', 'p(exito) \t= \t0.019879\n', 'p(fracaso) \t= \t0.980121\n']}], 'source': ['def bernoulli(n, p, size=None):\n', '    if not size:\n', '        return (np.random.random(size=n) < p)*1\n', '    else:\n', '        return (np.random.random(size=size) < p) * 1\n', '\n', 'def contar_exitos(experimentos, axis=0):\n', '    return np.sum(experimentos, axis=axis)\n', '\n', 'n = 1000000\n', 'p = 0.02\n', 'experimentos = bernoulli(n, p)\n', 'exitos = contar_exitos(experimentos)\n', 'fracasos = n - exitos \n', 'print(f"p \\tes \\t{p}")\n', 'print(f"1-p \\tes \\t{1-p}")\n', 'print(f"en {n} experimentos,")\n', 'print(f"p(exito) \\t= \\t{exitos/n}")\n', 'print(f"p(fracaso) \\t= \\t{fracasos/n}") ']}
6
{'cell_type': 'markdown', 'id': '863255d7', 'metadata': {}, 'source': ['**2)**\n', 'Uso las funciones ```bernoulli``` y ```contar_exitos``` para simular que llegan 15 fotones a un detector con eficiencia del 75%. Esto lo puedo hacer porque la llegada de cada fotón al detector es como tirar una moneda: o es detectado, o no lo es.']}
7
{'cell_type': 'code', 'execution_count': 3, 'id': '3ee3a1a7', 'metadata': {}, 'outputs': [], 'source': ['eficiencia = 0.75\n', 'fotones = 15\n', 'repeticiones = 1000\n', 'detecciones = bernoulli(fotones, eficiencia, size=(repeticiones, fotones))\n', 'experimentos = contar_exitos(detecciones, axis=1)']}
8
{'cell_type': 'markdown', 'id': '3373566b', 'metadata': {}, 'source': ['Ahora ```experimentos``` es una lista con la cantidad de fotones que fueron detectados en cada experimento.\n', '\n', 'Como dije antes la detección de cada fotón es binaria, y además, la detección de cada fotón es independiente del resto de detecciones. Por lo tanto, la distribución asociada a la detección de fotones es la binomial\n', '\n', '$$B(k \\mid n, p) = {n \\choose k} p^k (1-p)^{n-k},$$\n', '\n', 'donde en este caso $n=15$ y $p=0.75$.\n', '\n', 'Entonces, grafico el histograma de los experimentos y comparo con la binomial. Para comparar uso la función ```binom``` de ```scipy.stats```, que me permite inicializar una variable aleatoria ```rv``` binomial. ```rv.pmf(k)``` evalúa a la binomial en ```k```.']}
9
{'cell_type': 'code', 'execution_count': 4, 'id': 'bbd9e424', 'metadata': {}, 'outputs': [{'data': {'image/png': '\n', 'text/plain': ['<Figure size 432x288 with 1 Axes>']}, 'metadata': {}, 'output_type': 'display_data'}], 'source': ['# Genero la rv y la evalúo en todos los k posibles, de 0\n', '# a 15 para graficar el histograma teórico.\n', 'rv = binom(fotones, eficiencia)\n', 'freq_teo = np.array([rv.pmf(x) for x in range(fotones)])\n', '\n', '# Creo el histograma con los datos generados\n', 'freq, bin_edges = np.histogram(experimentos,\n', '                             bins=range(fotones+1),\n', '                             density=True)\n', '# Grafico\n', 'plt.stairs(freq, bin_edges, fill=True, label="Experimental")\n', 'plt.stairs(freq_teo, bin_edges, linewidth=2,label="Teórico")\n', 'plt.ylabel("Probabilidad")\n', 'plt.xlabel("Fotones detectados")\n', 'plt.legend(loc="upper left")\n', 'plt.show()']}
10
{'cell_type': 'markdown', 'id': '128e7bdb', 'metadata': {}, 'source': ['**3)**\n', '\n', 'Tenemos una fuente que emite en promedio $\\mu = I \\times \\Delta t = 15 \\frac{\\text{fot}}{\\text{s}}$, lo que quiere decir que si medimos con un detector con eficiencia del 100% por un segundo, en promedio vamos a detectar 15 fotones. En vez de medir durante 1 segundo, algo que podemos hacer es medir consecutivamente en mil intervalos $dt$ de 1 milisegundo. De este modo, la probabilidad de medir un fotón en cada intervalo es muy baja, pero sabemos que en los mil intervalos, debe haber en promedio 15 fotones. Como el intervalo de tiempo en el que medimos es tan chico podemos asumir que a lo sumo va a aparecer sólo un foton en cada uno. Además, es razonable decir que la probabilidad de que se emita un fotón es proporcional al intervalo de tiempo. De esta forma, cada intervalo de tiempo tiene un resultado binario: se emite un fotón o no se emite ninguno. Por eso podemos modelarlo con un experimento de bernoulli donde $p=I \\times dt$ y $m= \\frac{\\Delta t}{dt} = 1000$.\n', '\n', 'Como la cantidad de sucesos es muy grande pero la probabilidad de éxito es muy pequeña y por lo tanto el valor medio es constante, este es un proceso de Poisson,\n', '\n', '$$P(k \\mid \\mu) = \\frac{e^{-\\mu}\\mu^k}{k!}.$$\n', '\n', 'Lo simulo primero definiendo los parámetros']}
11
{'cell_type': 'code', 'execution_count': 5, 'id': 'a775ef8b', 'metadata': {}, 'outputs': [], 'source': ['Dt= 1\n', 'm = 1000\n', 'dt = Dt/m\n', 'I = 15']}
12
{'cell_type': 'markdown', 'id': '841f4a25', 'metadata': {}, 'source': ['Luego hago los experimentos de Bernoulli']}
13
{'cell_type': 'code', 'execution_count': 6, 'id': '5464f7ae', 'metadata': {}, 'outputs': [], 'source': ['repeticiones = 1000\n', '\n', '# Matriz donde cada fila es un experimento distinto y \n', '# cada columna un intervalo dt de tiempo\n', 'emitidos = bernoulli(m, I*dt, size=(repeticiones, m))\n', '\n', '# Lista con con la cantidad de fotones emitidos en cada dt\n', 'experimentos = contar_exitos(emitidos, axis=1)']}
14
{'cell_type': 'markdown', 'id': 'ff5000bd', 'metadata': {}, 'source': ['Como en promedio espero que se emitan 15 fotones por segundo, cambio los límites del histograma para que se vea el centro de la distribución.']}
15
{'cell_type': 'code', 'execution_count': 7, 'id': '4e80c082', 'metadata': {'scrolled': True}, 'outputs': [{'data': {'image/png': '\n', 'text/plain': ['<Figure size 432x288 with 1 Axes>']}, 'metadata': {}, 'output_type': 'display_data'}], 'source': ['# Genero una rv ahora poissoneana y con ella calculo la probabilidad teórica\n', 'rv = poisson(Dt*I)\n', 'freq_teo = np.array([rv.pmf(x) for x in range(m)])\n', '\n', '# Creo el histograma con los datos generados\n', 'freq, bin_edges = np.histogram(experimentos,\n', '                             bins=range(m+1),\n', '                             density=True)\n', 'plt.stairs(freq, bin_edges, fill=True, label="Experimental")\n', 'plt.stairs(freq_teo, bin_edges, linewidth=2,label="Teórico")\n', 'plt.xlim([0,40])\n', 'plt.xlabel("Fotones emitidos")\n', 'plt.ylabel("Probabilidad")\n', 'plt.legend()\n', 'plt.show()']}
16
{'cell_type': 'markdown', 'id': '6c651e83', 'metadata': {}, 'source': ['**4)**\n', '\n', 'Ahora me preguntan la probabilidad de detectar un fotón que fue emitido por la fuente, esto es\n', '\n', '$$P(\\text{detectar}) = P(\\text{absorber} \\mid \\text{emitir}) P(\\text{emitir}),$$\n', '\n', 'pero esas probabilidades ya las conocemos. La probabilidad de emitir $k$ fotones es la Poisson $P(k \\mid \\mu)$ donde $\\mu$ es el promedio de fotones emitidos, y la probabilidad de absorber $j$ fotones dado que llegaron $k$ al detector es la binomial $B(j \\mid k, p)$ donde $p$ es la eficiencia del detector. Como no sabemos cuántos fotones se van a emitir de la fuente, debemos sumar sobre todas las posibilidades, esto es sumar desde $k = 0$ hasta $\\infty$. Si lo escribimos explícitamente y desarrollamos queda\n', '\n', '$$\\begin{align*}P(\\text{detectar}) &= \\sum_{k=0, j\\geq k}^{\\infty} B(j \\mid k, p) P(k \\mid \\mu) \\\\ &= \\sum_{k=0, j\\geq k}^{\\infty} \\frac{k!}{(k-j)!j!} p^j (1-p)^{k-j} \\frac{e^{-\\mu}\\mu^k}{k!} \\\\ &= \\frac{e^{-\\mu}p^j \\mu^j}{j!} \\sum_{k=0, j\\geq k}^{\\infty} \\frac{[(1-p)\\mu]^{k-j}}{(k-j)!} \\\\ &= \\frac{e^{-\\mu}p^j \\mu^j}{j!} e^{(1-p)\\mu} \\\\ &= \\frac{e^{-p\\mu}(p\\mu)^j}{j!}.\\end{align*}$$\n', '\n', 'Llegamos a que la probabilidad de detectar un fotón emitido por la muestra es Poisson, pero con el valor medio pesado por la eficiencia del detector!.\n', '\n', 'Entonces, para ver si realmente es así, creo una ```rv``` Poisson con valor medio ```eficiencia * Dt * I``` y lo comparo con los datos generados aleatoriamente.']}
17
{'cell_type': 'code', 'execution_count': 8, 'id': 'f750b0ee', 'metadata': {}, 'outputs': [], 'source': ['rv = poisson(eficiencia * Dt*I)\n', '\n', '# Para cada experimento de emisión de la fuente, hago un bernoulli con esa cantidad de fotones emitidos.\n', '# Eso simula la probabilidad de detectar los fotones emitidos.\n', 'fotones_detectados = np.array([contar_exitos(bernoulli(fot_emit, eficiencia)) for fot_emit in experimentos])']}
18
{'cell_type': 'code', 'execution_count': 9, 'id': '8b1c27b4', 'metadata': {'scrolled': True}, 'outputs': [{'data': {'image/png': '\n', 'text/plain': ['<Figure size 432x288 with 1 Axes>']}, 'metadata': {}, 'output_type': 'display_data'}], 'source': ['# Creo los histogramas teóricos y generados\n', 'freq_teo = np.array([rv.pmf(x) for x in range(m)])\n', 'freq, bin_edges = np.histogram(fotones_detectados,\n', '                             bins=range(m+1),\n', '                             density=True)\n', '# Grafico\n', 'plt.stairs(freq, bin_edges, fill=True, label="Experimental")\n', 'plt.stairs(freq_teo, bin_edges, linewidth=2,label="Teórico")\n', 'plt.xlim([0,40])\n', 'plt.xlabel("Fotones detectados")\n', 'plt.ylabel("Probabilidad")\n', 'plt.legend()\n', 'plt.show()']}
19
{'cell_type': 'markdown', 'id': 'dfb6dbc8', 'metadata': {}, 'source': ['**5)**\n', '\n', 'Si tenía en cuenta que la probabilidad de detectar un fotón en un intervalo $dt$ es la probabilidad de emitirlo multiplicado por la probabilidad de absorberlo (puedo hacer eso porque son sucesos independientes), entonces podría haber hecho directamente un solo experimento de Bernoulli con esa probabilidad. Además, el proceso es Poisson por lo mismo que expliqué antes.']}
20
{'cell_type': 'code', 'execution_count': 10, 'id': 'edaf5f6e', 'metadata': {}, 'outputs': [], 'source': ['# Defino los parámetros\n', 'Dt= 1\n', 'm = 1000\n', 'dt = Dt/m\n', 'I = 15\n', 'eficiencia = 0.75\n', 'repeticiones = 1000\n', '\n', '# Genero los experimentos\n', 'fotones_detectados_todo_junto = bernoulli(m, eficiencia * I*dt, size=(repeticiones, m))\n', 'experimentos_todo_junto = contar_exitos(fotones_detectados_todo_junto, axis=1)']}
21
{'cell_type': 'code', 'execution_count': 11, 'id': '6126877d', 'metadata': {}, 'outputs': [{'data': {'image/png': '\n', 'text/plain': ['<Figure size 432x288 with 1 Axes>']}, 'metadata': {}, 'output_type': 'display_data'}], 'source': ['# Creo el histograma del experimento teniendo en cuenta todo junto\n', 'freq_todo_junto, bin_edges_todo_junto = np.histogram(experimentos_todo_junto,\n', '                             bins=range(m+1),\n', '                             density=True)\n', '\n', '# Grafico reutilizando las frecuencias teóricas que calculé antes, pues son las mismas\n', 'plt.stairs(freq, bin_edges, fill=True, label="Experimental", alpha=0.5)\n', 'plt.stairs(freq_teo, bin_edges, linewidth=2,label="Teórico")\n', 'plt.stairs(freq_todo_junto, bin_edges, fill=True,label="Todo junto", alpha=0.5)\n', 'plt.xlim([0,40])\n', 'plt.legend()\n', 'plt.show()']}
22
{'cell_type': 'code', 'execution_count': None, 'id': '681af8f1', 'metadata': {}, 'outputs': [], 'source': []}
23
{'cell_type': 'code', 'execution_count': None, 'id': 'ed747e86', 'metadata': {}, 'outputs': [], 'source': []}
